<script cml-type="interface">
  type resData = {
    width: Number,
    height: Number,
    left: Number,
    top: Number,
    right: Number,
    bottom: Number
  }

  type CallBack = (res: resData) => void;

  interface UserInfoInterface {
    getRect(refObj: CMLObject, cb: CallBack): void
  }
</script>

<script cml-type="web">
import px2cpx from '../px2cpx/index.js';
  class Method implements UserInfoInterface {
    getRect(refObj, cb) {
      let dom = refObj.webDom;
      let domRect = dom.getBoundingClientRect();
      let rectObj = {
        width: domRect && px2cpx(domRect.width) || 0,
        height: domRect && px2cpx(domRect.height) || 0,
        top: domRect && px2cpx(domRect.top) || 0,
        left: domRect && px2cpx(domRect.left) || 0,
        right: domRect && px2cpx(domRect.right) || 0,
        bottom: domRect && px2cpx(domRect.bottom) || 0,
      };
      cb(rectObj);
    }
  }

  export default new Method();
</script>

<script cml-type="weex">
import cmlBridge from '../../lib/sdk/cmlBridge';

  class Method implements UserInfoInterface {
    getRect(refObj, cb) {
      setTimeout(() => {
        cmlBridge.getComponentRect({ref: refObj.weexRef}, res => {
          cb({
            width: res.size && res.size.width || 0,
            height: res.size && res.size.height || 0,
            left: res.size && res.size.left || 0,
            top: res.size && res.size.top || 0,
            right: res.size && res.size.right || 0,
            bottom: res.size && res.size.bottom || 0
          });
        });
      }, 50)
    }
  }

  export default new Method();
</script>


<script cml-type="wx">
  import px2cpx from '../px2cpx/index.js';
  class Method implements UserInfoInterface {
    getRect(refObj, cb) {
      let query = wx.createSelectorQuery().in(refObj.context);
      query.select(`#${refObj.id}`).boundingClientRect();

      query.exec(function(res) {
        let rectObj = {
          width: res[0] && px2cpx(res[0].width) || 0,
          height: res[0] && px2cpx(res[0].height) || 0,
          left: res[0] && px2cpx(res[0].left) || 0,
          top: res[0] && px2cpx(res[0].top) || 0,
          right: res[0] && px2cpx(res[0].right) || 0,
          bottom: res[0] && px2cpx(res[0].bottom) || 0
        };
        cb(rectObj);
      });
    }
  }

  export default new Method();
</script>

<script cml-type="qq">
  import px2cpx from '../px2cpx/index.js';
  class Method implements UserInfoInterface {
    getRect(refObj, cb) {
      let query = qq.createSelectorQuery().in(refObj.context);
      query.select(`#${refObj.id}`).boundingClientRect();

      query.exec(function(res) {
        let rectObj = {
          width: res[0] && px2cpx(res[0].width) || 0,
          height: res[0] && px2cpx(res[0].height) || 0,
          left: res[0] && px2cpx(res[0].left) || 0,
          top: res[0] && px2cpx(res[0].top) || 0,
          right: res[0] && px2cpx(res[0].right) || 0,
          bottom: res[0] && px2cpx(res[0].bottom) || 0
        };
        cb(rectObj);
      });
    }
  }

  export default new Method();
</script>

<script cml-type="baidu">
  import px2cpx from '../px2cpx/index.js';
  class Method implements UserInfoInterface {
    getRect(refObj, cb) {
      let query = swan.createSelectorQuery().in(refObj.context);
      query.select(`#${refObj.id}`).boundingClientRect();

      query.exec(function(res) {
        let rectObj = {
          width: res[0] && px2cpx(res[0].width) || 0,
          height: res[0] && px2cpx(res[0].height) || 0,
          left: res[0] && px2cpx(res[0].left) || 0,
          top: res[0] && px2cpx(res[0].top) || 0,
          right: res[0] && px2cpx(res[0].right) || 0,
          bottom: res[0] && px2cpx(res[0].bottom) || 0
        };
        cb(rectObj);
      });
    }
  }

  export default new Method();
</script>

<script cml-type="alipay">
  import px2cpx from '../px2cpx/index.js';
  class Method implements UserInfoInterface {
    getRect(refObj, cb) {
      let query = my.createSelectorQuery();
      query.select(`#${refObj.id}`).boundingClientRect();

      query.exec(function(res) {
        let rectObj = {
          width: res[0] && px2cpx(res[0].width) || 0,
          height: res[0] && px2cpx(res[0].height) || 0,
          left: res[0] && px2cpx(res[0].left) || 0,
          top: res[0] && px2cpx(res[0].top) || 0,
          right: res[0] && px2cpx(res[0].right) || 0,
          bottom: res[0] && px2cpx(res[0].bottom) || 0
        };
        cb(rectObj);
      });
    }
  }
  export default new Method();
</script>
